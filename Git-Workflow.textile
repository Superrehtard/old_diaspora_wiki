If you're a developer who wants to work on the Diaspora source code and submit your changes for consideration to be merged into the master branch, here's how.  Thanks to "ThinkUp":https://github.com/ginatrapani/ThinkUp for their awesome developer guide, which inspired ours.

h1. Quickfire Do's and Don't's

p. If you're familiar with git and GitHub, here's the short version of what you need to know. Once you fork and clone the Diaspora code:

*  *Don't develop on the master branch.* Always create a development branch specific to "the issue":http://bugs.joindiaspora.com you're working on. Name it by issue # and description. For example, if you're working on Issue #359, an aspect naming fix, your development branch should be called 359-aspect-names. If you decide to work on another issue mid-stream, create a new branch for that issue--don't work on both in one branch.

* *Do not merge* the upstream master with your development branch; *rebase* your branch on top of the upstream master.

* *A single development branch should represent changes related to a single issue.* If you decide to work on another issue, create another branch.

h1. Step-by-step (the short version)

# Fork on GitHub (click Fork button)
# Clone to computer ($ git clone git@github.com:you/diaspora.git )
# Set up remote upstream ($ git remote add upstream git://github.com/diaspora/diaspora.git)
# Create a branch for new issue ($ git checkout -b 100-new-feature)
# Develop on issue branch. _[Time passes, the main Diaspora repository accumulates new commits]_
# Commit changes to issue branch. ($ git add . ; git commit -m 'commit message')
# Fetch upstream ($ git fetch upstream)
# Update local master ($ git checkout master; git pull upstream master)
# Repeat steps 5-8 till dev is complete
# Rebase issue branch ($ git checkout 100-new-feature; git rebase master)
# Push branch to GitHub ($ git push origin 100-new-feature)
# Issue pull request (Click Pull Request button) 

h1. Step-by-step (the long version)

If you're new to git and GitHub, here's the longer version of these instructions.

h2. Create an account on GitHub and fork the Diaspora repository.

# Create a free account on GitHub, and log in.
# Go to "the main Diaspora page on GitHub"::http://github.com/diaspora/diaspora.
# Click the "Fork" button near the top of the screen. This will get you your own copy that you can make changes to.
[[http://img.skitch.com/20101018-j5xmmrs6ccn9ku2gic12y13cf9.png]]

h2. Establish connectivity between your GitHub account and your development machine.

# Generate an SSH key on your development machine. Here's a "good guide":http://help.github.com/key-setup-redirect that gives you specific directions for whatever OS you're accessing the page with.
# Make sure you've got an SSH public key on your machine and recorded in your GitHub account. You can see your SSH Public Keys on the Account Overview section of your GitHub account.
[[http://img.skitch.com/20101018-nayqmm1ne8qdyafpjb7tib4fi4.png]]
# To test the GitHub authentication run:

<pre>
<code>
$ ssh git@github.com
</code>
</pre>

If all is well, you should see something like this:

<pre>
<code>
PTY allocation request failed on channel 0
ERROR: Hi username! You've successfully authenticated, but GitHub does not provide shell access
Connection to github.com closed.
</code>
</pre>

h2. Clone your GitHub fork to your development machine

# Run a clone command against your GitHub fork. It will look something like this except that it will use your GitHub account name instead of "you":

<pre>
<code>
$ git clone git@github.com:you/diaspora.git 
</code>
</pre>

p. That downloads your copy of Diaspora to a git repository on your development machine. Change directory into the new diaspora directory.

p. Now you need to install everything you need to run it - which is quite a lot of stuff. We have a guide to "installing and running Diaspora":http://github.com/diaspora/diaspora/wiki/Installing-and-Running-Diaspora which should help. Pop into #diaspora on IRC (freenode) if you have problems.

You'll know you're done when you can run specs (in two stages - the cucumber features, which are selenium acceptance tests, and the rspec tests, which are unit tests) by doing this:

<pre>
<code>
$ rake spec
</code>
</pre>

p. *We try to make sure these always succeed.* Our "continuous integration server":http://ci.joindiaspora.com will tell you if there any current failures. If you have any test failures that you don't see on CI, come ask in the #diaspora-dev IRC channel.

h2. Figure out what to work on

Maybe you have a feature addition in mind, but if not, check out our "issue tracker":http://bugs.joindiaspora.com, or come ask in IRC what needs doing.

h2. Create an Issue-Specific Development Branch

p. Before you start working on a new feature or bugfix, create a new branch in your local repository that's dedicated to that one change. Name it by issue number (if applicable) and description. For example, if you're working on issue #359, a aspect naming bugfix, create a new branch called 359-aspect-names, like this:

<pre>
<code>
$ git checkout -b 359-aspect-names
</code>
</pre>

h2. Write awesome code

p. You must write unit tests for all bugfixes, no matter how small. We can help you! 

p. Edit and test the files on your development machine. When you've got something the way you want and established that it works, commit the changes to your branch on your development server's git repo.

<pre>
<code>
$ git add <filename>
$ git commit -m 'Issue #359: Some kind of descriptive message' 
</code>
</pre>

p. You'll need to use git add for each file that you created or modified. There are ways to add multiple files, but I highly recommend a more deliberate approach unless you know what you're doing.

p. Then, you can push your new branch to GitHub, like this (replace 359-aspect-names with your branch name):

<pre>
<code>
$ git push origin 359-aspect-names
</code>
</pre>

p. You should be able to log into your GitHub account, switch to the branch, and see that your changes have been committed. Then click the Pull button to request that your commits get merged into the Diapsora development trunk.  

h2. Keep Your Repository Up to Date

p. In order to get the latest updates from the development trunk do a one-time setup to establish the main GitHub repo as a remote by entering: 

<pre>
<code>
$ git remote add upstream git://github.com/diaspora/diaspora.git
</code>
</pre>

p. Verify you've now got "origin" and "upstream" remotes by entering: 

<pre>
<code>
$ git remote
</code>
</pre>

p. You'll see upstream listed there.

h2(#gitrebase). Rebase Your Development Branch on the Latest Upstream

p. To keep your development branch up to date, rebase your changes on top of the current state of the upstream master. See the *<a href="#gitrebase1">What's git-rebase?</a>* section below to learn more about rebasing.

p. If you've set up an upstream branch as detailed above, and a development branch called 100-retweet-bugfix, you'd update upstream, update your local master, and rebase your branch from it like so:

<pre> 
<code>
$ git fetch upstream
$ git checkout master
$ git rebase upstream/master
$ git checkout 359-aspect-names
[make sure all is committed as necessary in branch]
$ git rebase master
</code>
</pre>

p. You may need to resolve conflicts that occur when a file on the development trunk and one of your files have both been changed. Edit each file to resolve the differences, then commit the fixes to your development server repo and test. Each file will need to be "added" before running a "commit." 

p. Conflicts are clearly marked in the code files. Make sure to take time in determining what version of the conflict you want to keep and what you want to discard. 

<pre>
<code>
$ git add <filename>
$ git commit 
</code>
</pre>

p. To push the updates to your GitHub repo, replace 100-retweet-bugfix with your branch name and run:

<pre>
<code>
$ git push origin 359-aspect-names
</code>
</pre>

h2. Send Diaspora a pull request on github

p. Github will notify us and we'll review your patch and either pull it in or comment on it

p. Helpful hint: You can always edit your last commit message by using:

<pre>
<code>
$ git commit --amend
</code>
</pre>

h2. Some gotchas

p. %{color:red}Be careful not to commit any of your configuration files, logs, or throwaway test files to your GitHub repo.% These files can contain information you wouldn't want publicly viewable and they will make it impossible to merge your contributions into the main development trunk of Diaspora. 

p. Most of these special files are listed in the <code>.gitignore</code> file and won't be included in any commit, but you should carefully review the files you have modified and added before staging them and committing them to your repo. The git status command will display detailed information about any new files, modifications and staged.

<pre>
<code>
$ git status 
</code>
</pre>

p. %{color:red}One thing you may not want to do is to issue a git commit with the -a option. This automatically stages and commits every modified file that's not expressly defined in .gitignore, including your crawler logs.%

<pre>
<code>
$ git commit -a 
</code>
</pre>

h1(#gitrebase1). What's git-rebase?

p. Using <code>git-rebase</code> helps create clean commit trees and makes keeping your code up-to-date with the current state of the upstream master easy. Here's how it works.

p. Let's say you're working on Issue #212 a new plugin in your own branch and you start with something like this:

<pre>
<code>
          1---2---3 #212-my-new-plugin
         /
    A---B #master
</code>
</pre>

p. You keep coding for a few days and then pull the latest upstream stuff and you end up like this:

<pre>
<code>
          1---2---3 #212-my-new-plugin
         /
    A---B--C--D--E--F #master
</code>
</pre>

p. So all these new things (C,D,..F) have happened since you started. Normally you would just keep going (let's say you're not finished with the plugin yet) and then deal with a merge later on, which becomes a commit, which get moved upstream and ends up grafted on the tree forever.

p. A cleaner way to do this is to use rebase to essentially rewrite your commits as if you had started at point F instead of point B. So just do:

<pre>
<code>
git rebase master 212-my-new-plugin
</code>
</pre>

p. git will rewrite your commits like this:

<pre>
<code>
                      1---2---3 #212-my-new-plugin
                     /
    A---B--C--D--E--F #master
</code>
</pre>

p. It's as if you had just started your branch. One immediate advantage you get is that you can test your branch now to see if C, D, E, or F had any impact on your code (you don't need to wait until you're finished with your plugin and merge to find this out). And, since you can keep doing this over and over again as you develop your plugin, at the end your merge will just be a fast-forward (in other words no merge at all).

p. So when you're ready to send the new plugin upstream, you do one last rebase, test, and then merge (which is really no merge at all) and send out your pull request. Then in most cases, Gina has a simple fast forward on her end (or at worst a very small rebase or merge) and over time that adds up to a simpler tree.

p. More info on the git man page here: 
"Git rebase: man page":http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html